[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lewis & Clark College Data Science Resources Hub",
    "section": "",
    "text": "We have developed a variety of resources that teachers are welcome to use in their classrooms to teach R and data science. Below find links to our various resources.\nLink to github: includes repositories with various tutorials\nBio 110 R Data Science Tutorials: Online tutorials created for an intro to biology course which cover intro to R coding, data manipulation, basic visualization using ggplot, and inferential stats. Can be completed directly on a web browser (note: safari does not work).\nData in the Wild Intro to Data Science Modules: Modules developed for Lewis & Clark College’s Data in the Wild data science course. They cover basic data wrangling, graphing with ggplot and inferential statistics. They are files that must be opened in Rstudio desktop or posit.cloud (an online version of Rstudio). Follow the link for more information and to download the files.\nData in the Wild Cheatsheet: List of commands used in the Data in the Wild Modules.\nData Science 140 Web Tutorials: Online web tutorials used in Data Science 140 at Lewis & Clark college. These are practice problems for students who are learning data science - they do not teach R from scratch (refer to the Bio110 and Data in the Wild modules for resources that teach R from scratch).\nMiddle and High school Data Science Resources: This website has lesson plans, online coding tutorials, and other data science teaching resources for middle and high school teachers. It was developed through a teaching collaboration between 6-12 educators in the Portland area, Lewis & Clark undergraduates and professors, and University of Arizona faculty."
  },
  {
    "objectID": "Cheatsheet.html",
    "href": "Cheatsheet.html",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\nCreate a data frame: data.frame(____)\n\ndf &lt;- data.frame(var_1 = c(1,2,3) , var_2 = c(\"cat\", \"dog\", \"fish\"))\ndf\n\n  var_1 var_2\n1     1   cat\n2     2   dog\n3     3  fish\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Cheatsheet.html#basic-r-commands",
    "href": "Cheatsheet.html#basic-r-commands",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\nCreate a data frame: data.frame(____)\n\ndf &lt;- data.frame(var_1 = c(1,2,3) , var_2 = c(\"cat\", \"dog\", \"fish\"))\ndf\n\n  var_1 var_2\n1     1   cat\n2     2   dog\n3     3  fish\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "href": "Cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Working with a data set in the tidyverse",
    "text": "Working with a data set in the tidyverse\nWe use the tidyverse to analyze data in this cheatsheet. To install run the following code:\n\ninstall.packages(\"tidyverse\")\n\nAfter installing, to load the tidyverse run:\n\nlibrary(tidyverse)\n\n\nUploading and viewing a data set\n\ndataFrame &lt;- read_csv(\"myCSV.csv\") : Creates a data frame from a file called myCSV.csv\nwrite_csv(dataFrame, \"myCSV.csv\"): Creates a csv from a data frame\nview(dataFrame): Enter view-mode to see the entire data frame\nstr(dataFrame): Gives the structure of data frame\nglimpse(dataFrame): Take a quick look at a data frame\nsummary(dataFrame): Returns min, max, mean, meadian, 1st/3rd quartiles for all vectors in dataFrame\ndataFrame$columnName: Calls up specific column from a data frame\nunique(vector): Find the number of unique values in a column/vector\nlength(): Counts the number of entries in a column/vector\n\n\n\nRearranging & Summarizing data\n\nUse logical operators to combine conditions: & (and), | (or), ! (not)\nUse comparison operators to describe conditions: &lt;, &gt;, ==, !=, &lt;=, &gt;=\ngroup_by(.data, column): Takes a dataset and groups it by a column/variable\nsummarize(.data, summaryStat = statistic formula): Takes a dataset and outputs summary statistics that you define.\n\nn(): Calculates current group size. Can be used in summarize and group_by\nCombine group_by and summarize using the pipe (|&gt;) to see summary statistics for specific groups/variables.\nThe pipe: Use |&gt; OR %&gt;% to string functions and data together. Read as “AND THEN”.\n\nExample:\n\n  dataFrame |&gt; \n    group_by(firstColumn)|&gt; \n    summarize(mean_of_secondColumn = mean(secondColumn), \n              standard_deviation_of_secondColumn = sd(secondColumn),\n              number_in_each_group = n(), \n              percent = n()/nrow(dataFrame)*100)\n\nfilter(.data=myDataFrame, column==\"some value\"): Subsets dataframe, lets us pick rows of data based on “some value”, including a specific value, mean, median, etc.\nselect(.data, column(s)): Choose columns from a dataframe.\n\ncolumn1 , column2 : choose column1 and column2\ncolumn1:column5 : choose all columns between column1 and column5\n-column1: choose all columns except column1\n\nmutate(data, newColumn = yourFormula): Creates a new column in a dataset defined by a calculation you input.\narrange(data, column): Rearrange data into numerical order by a specific column"
  },
  {
    "objectID": "Cheatsheet.html#plotting-with-ggplot",
    "href": "Cheatsheet.html#plotting-with-ggplot",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Plotting with GGPlot",
    "text": "Plotting with GGPlot\n\nResources:\n\nGGPlot Cheatsheet pdf\nPosit.cloud ggplot cheatsheet, website version\n\n\n\nGGPlot Basics:\n\nBasic structure:\n\nggplot(data, mapping=aes()) +\n      geom_function()\n\nConnect different properties using a +\nBasic Components:\n\nData: data=dataSet: Define your data set\nAesthetics: mapping = aes(variables): Define the variables. Can also specify color/fill for your graph and geometries.\nGeometry: geom_GeometricObject(): Define the type of plot\n\n\n\n\nGeometries\n\ngeom_histogram(): Creates a histogram\n\nSyntax: geom_histogram(bins=X) Specify number of bins\n\ngeom_point(): Creates points (scatterplot) for each data point\n\nCan specify color = ___ and shape = ____\n\ngeom_bar() : Creates a bar graph\n\nSyntax:\n\ngeom_bar(): Aggregates data for you\ngeom_bar(stat = \"identity\"): Creates a bar graph with pre-aggregated data that you input\ngeom_bar(position=\"___\") Can choose “stack” (bars on top of each other), “dodge” (bars side by side) or “fill” (bars stacked, scaled to 100%).\nAdd error bars: geom_errorbar(mapping=aes(ymin, ymax), width)\n\n\ngeom_boxplot(): Creates a boxplot\n\nAdd error bars: stat_boxplot(geom=\"errorbar\")\n\ngeom_density(): Creates a density graph\n\nSyntax: geom_density(adjust=X) X is a ratio, how smooth the graph is\n\ngeom_smooth(method=\"lm\", se=FALSE): Creates a line of best fit\nlabs() : Add a title and axes labels to your graph\nfacet_wrap(~ variable): Create separate plots for each aspect of a given variable\nAnd more!\n\n\n\nOther useful GGPlot functions:\n\ninstall.packages(\"ggplot2\") and library(ggplot2): Install and load GGplot package. Note: ggplot2 is included in the tidyverse so you do NOT need to load both packages.\nggsave(\"yourTitleHere.jpg\", currentPlotName): Saves “currentPlotName” as a jpg file called “yourTitleHere.jpg”."
  },
  {
    "objectID": "Cheatsheet.html#examples-using-ggplot-with-other-tidyverse-functions",
    "href": "Cheatsheet.html#examples-using-ggplot-with-other-tidyverse-functions",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Examples: Using GGPlot with other tidyverse functions",
    "text": "Examples: Using GGPlot with other tidyverse functions\nUse the pipe to string together functions and create tidy data before plotting.\nThe following examples use data from the palmerpenguins package which has been preloaded into this document. Click the green play button to see them run. Feel free to edit the code as well if you want to try out other functions!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere’s a preview of the penguin data, and here is a link to more information about the data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBasic bar graph of median flipper length on each island:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoxplot of Adelie penguin flipper length, by sex:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Cheatsheet.html#inferential-statistics",
    "href": "Cheatsheet.html#inferential-statistics",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Inferential Statistics",
    "text": "Inferential Statistics\n\nBasic statistical tests\n\nt.test(data, dependentVariable ~ independentVariable): 2 sample t-test - compare 2 groups on a numerical measure\n\nRequires: 2 samples of quantitative data\n\naov(data, dependentVariable ~ independentVariable): ANOVA (analysis of variance) test - compare means among groups\n\nRequires: Independent variable - categorical; dependent variable - numerical\n\nTukeyHSD(data): Tukey’s HSD - Post Hoc test which tells you which specific means differ from each other\n\n\n\nLinear regression\n\ncor(data$independentVariable, data$dependentVariable): Correlation coefficient - outputs a number between -1 and 1 which tells strength and direction of the relationship between 2 numeric variables\n\nRequires 2 numeric variables\n\nlm(data, dependentVariable ~ independentVariable): Fit a linear model\n\nsummary(yourLinearModel): View more details about a linear model including regression coefficients, p value for linear model coefficients, quartiles, residual standard error, F-statistic."
  },
  {
    "objectID": "ditw.html",
    "href": "ditw.html",
    "title": "Data in the Wild Modules - Downloadable R tutorials",
    "section": "",
    "text": "Below are R tutorials developed for Lewis & Clark College’s Data in the Wild data science course. They cover basic data wrangling, graphing with ggplot and inferential statistics.\nTo use the tutorials, download the following .zip files and open in an R project on posit.cloud or R studio desktop. Each file contains modules which include a code-a-long, practice problems and homework.\nWe recommend you begin with the code-a-long and refer to the code-a-long key to determine which commands to type in the code-a-long. Then, proceed to the homework and practice problems for more practice.\nModule 1 - Basic data wrangling .zip file\nModule 2 - Plotting with ggplot .zip file\nModule 3 - Inferential Statistics .zip file\nIf you’d like help downloading and using these modules, refer to this video."
  }
]