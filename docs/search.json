[
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWelcome to this data science tutorial! We’ll be using R to look at climate change data.\nR is a coding language that is often used to look at LARGE amounts of data. It can do all sorts of things including basic math!\nWant to try using R?\nIn the code box right below this, type in 6+3 and press the green play button:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDo you see the answer 9 that popped out right under your code? Pretty cool!\nThe gray and white box with the green arrow and “run code” button is called a code chunk. You can type in “R commands” into that box and it will output the answer underneath the code chunk.\n\n\nToday we’ll be using R to look at climate data. We will be able to create graphs of different variables in our data, like carbon dioxide emissions and temperature.\nWe’ve preloaded a dataset into this tutorial. This was found\n\n\nLet’s start by taking a look at the data set. Click the green play button below and see what happens!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see 10 rows of data and a lot of random words. We won’t go into what all of it means, but here’s a quick overview:\n\nThe words on the top (country, year, iso_code, population, etc) are the different variables in our data set\nUnderneath those words are the type of variable, which we’ll ignore right now.\nBelow that, you’ll see some numbers and NA values. Those are different values for each variable.\n\nOur data is called co2Data. If you type co2Data into any code chunk, you’ll be able to see our data.\n\n\n\n\nWe can use R to do all sorts of things, including make graphs easily and quickly! In this tutorial we won’t be able to cover all the details of how to make a graph, but there’s lots of resources online you can find to learn more. We use something called ggplot to make graphs in this tutorial.\nFirst, lets make a graph that just looks at the worlds CO2 Emissions over time, this data goes all the way back to 1750!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWhat if we want to compare this to how the worlds temperature has changed over this same time? We have another dataset that contains temperature data. It tells us how different the temperature each year is from the average in 1900.\nIn the code chunk below type tempData and click “run code” to see the new data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see 2 columns: one called Year and one called Anomaly. The Anomaly column tells us how different the temperature that year was from the average in 1900. This only shows us 10 years, but the data goes all the way to 2023! We can graph the data to visualize it better.\nLets graph this! Click “run code” and see what happens!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, what if we combine our co2 data and our temperature data?\nLets put these two data sets together matching up the years. Then, we can make a graph of temperature anomaly and co2 levels. Click “run code”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNow what if we ask where most of that CO2 we’re emitting comes from? We can do this with a bar graph that shows the data from the past few years. A bar graph is a little more complicated to make, so we’ve edited some of our data in the background to make it easier to graph with. Our new edited data is called co2DataFiltered.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s see what a graph looks like! Click “run code”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nOptional: Open this if you want to learn more about how the code works\n\n\n\n\n\nGGPlot is an awesome tool you can use to create plots! There’s lots of tutorials online that I recommend checking out. But for now, here’s a brief explanation of how our code works. Below, I’ve copied and pasted the code from above, but this time there are explanations scattered throughout. The explanations start with a # (called a comment) and are gray. See if you can find out which line creates the title of the graph!\n\n#Tell R what data to use and what the x and y values are\nggplot(data=co2DataFiltered, mapping=aes(x=year_chr, y=value, fill=name))+\n  \n  #Select what kind of graph we're making\n  geom_col(position=\"dodge\") +\n  \n  #Label the graph to make it easy to read\n  labs(title=\"CO2 Production from Energy Vs. Other Sources\", x=\"Year\", y=\"CO2 In Tons\") +\n  \n  #add a legend to show what each color means \n  scale_fill_discrete(name=\"CO2 Source\", labels=c(\"CO2 from Energy\", \"All Other Sources of CO2\")) +\n  \n  #make it pretty :)\n  theme_light() \n\nWere you able to tell which line created the title??\nIf you want even more code to look at, keep reading! You can also feel free to skip to the next section called Scatter Plot Generator\nBelow, you can see the code that was used to filter our data and make it easier to use in a bar graph. This is code that we ran secretly in the background before you created the bar graph. It takes the co2Data and edits it to make it easier to graph with.\n\n#Creates new columns called \"co2_from_energy\" that includes co2 data from coal, gas, oil. \n#Then creates a column called \"co2_no_energy\" that is the rest of the co2 production\nco2DataBar&lt;-co2Data%&gt;%\n  group_by(year)%&gt;%\n  mutate(co2_from_energy=sum(coal_co2, gas_co2, oil_co2, na.rm=T))%&gt;%\n  mutate(co2_no_energy=co2-co2_from_energy)\n\n#Filter data to get just the columns we need and make it graphable\n#Tells R to only use \"year\", \"co2_no_energy\" and \"co2_from_energy\" in the graph. \nco2DataFiltered&lt;-co2DataBar%&gt;%select(year, co2_no_energy, co2_from_energy)%&gt;%\n  \n  #Chooses only years above 2019\n  filter(year&gt;=2019)%&gt;%\n  \n  #A few final adjustments to make the graph easier to use\n  pivot_longer(cols=c(co2_no_energy, co2_from_energy))%&gt;%\n  mutate(year_chr=as.character(year))\n\n\n\n\n\n\n\nNow you get to try creating your own plot! You will be able to choose any two variables and see how they relate to each other. If your questions haven’t been answered by the infographics and graphs you’ve already seen, take a look at the data and see what you can ask to try and learn more.\nFirst, decide which variable you want to learn about. You can choose any variable from co2Data. Here are some options:\n\npopulation\nyear\ncement_co2\nco2\nconsumption_co2\ncumulative_co2\nenergy_per_gdp\nland_use_change_co2\ngas_co2\ncoal_co2\ncement_co2\nland_use_change_co2\nmethane\ntemperature_change_from_co2\n\nChoose two of these variables that you want to plot against each other. Then, in the code chunk below, type them inside the quotes. Make sure you leave the quotes and just replace the line. Also make sure you type the variable name exactly - in fact, you can just copy and paste from the list.\nThen click “run code”!\n\nCode editorExample\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNow, let’s add titles and labels to your graph! Again, type your title between the quotation marks. Then click “run code”!\n\nCode editorExample\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFinally, run this to see your scatter plot! Click “run code” and if something doesn’t look right, click through the “troubleshooting” tabs to see how to fix it.\n\nCode editorTroubleshooting - points clustered at the bottomTroubleshooting: error message\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIf your points are clustered at the bottom of your graph, this may be because it goes all the way back to 1750 and there wasn’t much change until much more recently. So try running this code instead. It will display your graph from 2000 to 2020.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDid you get an error message in red?\n\nIf the graph also displayed and looks right, don’t worry about the error message!\nIf the graph is not displaying, go back and make sure you ran all the code chunks previously where you defined the variables and labels.\n\nDid you put everything in quotes when you defined the variables and labels?\n\nYou don’t need to edit this code at all, just the code where you define variables and labels\nIf it still isn’t working or if you accidentally deleted something, you can refresh the page to restart.\n\n\n\n\nNice work! Hopefully you enjoyed making your own graph with this data!"
  },
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html#our-data",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html#our-data",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "Today we’ll be using R to look at climate data. We will be able to create graphs of different variables in our data, like carbon dioxide emissions and temperature.\nWe’ve preloaded a dataset into this tutorial. This was found\n\n\nLet’s start by taking a look at the data set. Click the green play button below and see what happens!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see 10 rows of data and a lot of random words. We won’t go into what all of it means, but here’s a quick overview:\n\nThe words on the top (country, year, iso_code, population, etc) are the different variables in our data set\nUnderneath those words are the type of variable, which we’ll ignore right now.\nBelow that, you’ll see some numbers and NA values. Those are different values for each variable.\n\nOur data is called co2Data. If you type co2Data into any code chunk, you’ll be able to see our data."
  },
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html#our-first-graph",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html#our-first-graph",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "We can use R to do all sorts of things, including make graphs easily and quickly! In this tutorial we won’t be able to cover all the details of how to make a graph, but there’s lots of resources online you can find to learn more. We use something called ggplot to make graphs in this tutorial.\nFirst, lets make a graph that just looks at the worlds CO2 Emissions over time, this data goes all the way back to 1750!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html#temperature-data",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html#temperature-data",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "What if we want to compare this to how the worlds temperature has changed over this same time? We have another dataset that contains temperature data. It tells us how different the temperature each year is from the average in 1900.\nIn the code chunk below type tempData and click “run code” to see the new data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see 2 columns: one called Year and one called Anomaly. The Anomaly column tells us how different the temperature that year was from the average in 1900. This only shows us 10 years, but the data goes all the way to 2023! We can graph the data to visualize it better.\nLets graph this! Click “run code” and see what happens!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, what if we combine our co2 data and our temperature data?\nLets put these two data sets together matching up the years. Then, we can make a graph of temperature anomaly and co2 levels. Click “run code”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html#co2-sources",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html#co2-sources",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "Now what if we ask where most of that CO2 we’re emitting comes from? We can do this with a bar graph that shows the data from the past few years. A bar graph is a little more complicated to make, so we’ve edited some of our data in the background to make it easier to graph with. Our new edited data is called co2DataFiltered.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s see what a graph looks like! Click “run code”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nOptional: Open this if you want to learn more about how the code works\n\n\n\n\n\nGGPlot is an awesome tool you can use to create plots! There’s lots of tutorials online that I recommend checking out. But for now, here’s a brief explanation of how our code works. Below, I’ve copied and pasted the code from above, but this time there are explanations scattered throughout. The explanations start with a # (called a comment) and are gray. See if you can find out which line creates the title of the graph!\n\n#Tell R what data to use and what the x and y values are\nggplot(data=co2DataFiltered, mapping=aes(x=year_chr, y=value, fill=name))+\n  \n  #Select what kind of graph we're making\n  geom_col(position=\"dodge\") +\n  \n  #Label the graph to make it easy to read\n  labs(title=\"CO2 Production from Energy Vs. Other Sources\", x=\"Year\", y=\"CO2 In Tons\") +\n  \n  #add a legend to show what each color means \n  scale_fill_discrete(name=\"CO2 Source\", labels=c(\"CO2 from Energy\", \"All Other Sources of CO2\")) +\n  \n  #make it pretty :)\n  theme_light() \n\nWere you able to tell which line created the title??\nIf you want even more code to look at, keep reading! You can also feel free to skip to the next section called Scatter Plot Generator\nBelow, you can see the code that was used to filter our data and make it easier to use in a bar graph. This is code that we ran secretly in the background before you created the bar graph. It takes the co2Data and edits it to make it easier to graph with.\n\n#Creates new columns called \"co2_from_energy\" that includes co2 data from coal, gas, oil. \n#Then creates a column called \"co2_no_energy\" that is the rest of the co2 production\nco2DataBar&lt;-co2Data%&gt;%\n  group_by(year)%&gt;%\n  mutate(co2_from_energy=sum(coal_co2, gas_co2, oil_co2, na.rm=T))%&gt;%\n  mutate(co2_no_energy=co2-co2_from_energy)\n\n#Filter data to get just the columns we need and make it graphable\n#Tells R to only use \"year\", \"co2_no_energy\" and \"co2_from_energy\" in the graph. \nco2DataFiltered&lt;-co2DataBar%&gt;%select(year, co2_no_energy, co2_from_energy)%&gt;%\n  \n  #Chooses only years above 2019\n  filter(year&gt;=2019)%&gt;%\n  \n  #A few final adjustments to make the graph easier to use\n  pivot_longer(cols=c(co2_no_energy, co2_from_energy))%&gt;%\n  mutate(year_chr=as.character(year))"
  },
  {
    "objectID": "brainstorm_612_lessons/climate_change_tutorial.html#scatter-plot-generator",
    "href": "brainstorm_612_lessons/climate_change_tutorial.html#scatter-plot-generator",
    "title": "Climate Change Data Tutorial",
    "section": "",
    "text": "Now you get to try creating your own plot! You will be able to choose any two variables and see how they relate to each other. If your questions haven’t been answered by the infographics and graphs you’ve already seen, take a look at the data and see what you can ask to try and learn more.\nFirst, decide which variable you want to learn about. You can choose any variable from co2Data. Here are some options:\n\npopulation\nyear\ncement_co2\nco2\nconsumption_co2\ncumulative_co2\nenergy_per_gdp\nland_use_change_co2\ngas_co2\ncoal_co2\ncement_co2\nland_use_change_co2\nmethane\ntemperature_change_from_co2\n\nChoose two of these variables that you want to plot against each other. Then, in the code chunk below, type them inside the quotes. Make sure you leave the quotes and just replace the line. Also make sure you type the variable name exactly - in fact, you can just copy and paste from the list.\nThen click “run code”!\n\nCode editorExample\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNow, let’s add titles and labels to your graph! Again, type your title between the quotation marks. Then click “run code”!\n\nCode editorExample\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFinally, run this to see your scatter plot! Click “run code” and if something doesn’t look right, click through the “troubleshooting” tabs to see how to fix it.\n\nCode editorTroubleshooting - points clustered at the bottomTroubleshooting: error message\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIf your points are clustered at the bottom of your graph, this may be because it goes all the way back to 1750 and there wasn’t much change until much more recently. So try running this code instead. It will display your graph from 2000 to 2020.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDid you get an error message in red?\n\nIf the graph also displayed and looks right, don’t worry about the error message!\nIf the graph is not displaying, go back and make sure you ran all the code chunks previously where you defined the variables and labels.\n\nDid you put everything in quotes when you defined the variables and labels?\n\nYou don’t need to edit this code at all, just the code where you define variables and labels\nIf it still isn’t working or if you accidentally deleted something, you can refresh the page to restart.\n\n\n\n\nNice work! Hopefully you enjoyed making your own graph with this data!"
  },
  {
    "objectID": "Cheatsheet.html",
    "href": "Cheatsheet.html",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\nCreate a data frame: data.frame(____)\n\ndf &lt;- data.frame(var_1 = c(1,2,3) , var_2 = c(\"cat\", \"dog\", \"fish\"))\ndf\n\n  var_1 var_2\n1     1   cat\n2     2   dog\n3     3  fish\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Cheatsheet.html#basic-r-commands",
    "href": "Cheatsheet.html#basic-r-commands",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\nCreate a data frame: data.frame(____)\n\ndf &lt;- data.frame(var_1 = c(1,2,3) , var_2 = c(\"cat\", \"dog\", \"fish\"))\ndf\n\n  var_1 var_2\n1     1   cat\n2     2   dog\n3     3  fish\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "href": "Cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Working with a data set in the tidyverse",
    "text": "Working with a data set in the tidyverse\nWe use the tidyverse to analyze data in this cheatsheet. To install run the following code:\n\ninstall.packages(\"tidyverse\")\n\nAfter installing, to load the tidyverse run:\n\nlibrary(tidyverse)\n\n\nUploading and viewing a data set\n\ndataFrame &lt;- read_csv(\"myCSV.csv\") : Creates a data frame from a file called myCSV.csv\nwrite_csv(dataFrame, \"myCSV.csv\"): Creates a csv from a data frame\nview(dataFrame): Enter view-mode to see the entire data frame\nstr(dataFrame): Gives the structure of data frame\nglimpse(dataFrame): Take a quick look at a data frame\nsummary(dataFrame): Returns min, max, mean, meadian, 1st/3rd quartiles for all vectors in dataFrame\ndataFrame$columnName: Calls up specific column from a data frame\nunique(vector): Find the number of unique values in a column/vector\nlength(): Counts the number of entries in a column/vector\n\n\n\nRearranging & Summarizing data\n\nUse logical operators to combine conditions: & (and), | (or), ! (not)\nUse comparison operators to describe conditions: &lt;, &gt;, ==, !=, &lt;=, &gt;=\ngroup_by(.data, column): Takes a dataset and groups it by a column/variable\nsummarize(.data, summaryStat = statistic formula): Takes a dataset and outputs summary statistics that you define.\n\nn(): Calculates current group size. Can be used in summarize and group_by\nCombine group_by and summarize using the pipe (|&gt;) to see summary statistics for specific groups/variables.\nThe pipe: Use |&gt; OR %&gt;% to string functions and data together. Read as “AND THEN”.\n\nExample:\n\n  dataFrame |&gt; \n    group_by(firstColumn)|&gt; \n    summarize(mean_of_secondColumn = mean(secondColumn), \n              standard_deviation_of_secondColumn = sd(secondColumn),\n              number_in_each_group = n(), \n              percent = n()/nrow(dataFrame)*100)\n\nfilter(.data=myDataFrame, column==\"some value\"): Subsets dataframe, lets us pick rows of data based on “some value”, including a specific value, mean, median, etc.\nselect(.data, column(s)): Choose columns from a dataframe.\n\ncolumn1 , column2 : choose column1 and column2\ncolumn1:column5 : choose all columns between column1 and column5\n-column1: choose all columns except column1\n\nmutate(data, newColumn = yourFormula): Creates a new column in a dataset defined by a calculation you input.\narrange(data, column): Rearrange data into numerical order by a specific column"
  },
  {
    "objectID": "Cheatsheet.html#plotting-with-ggplot",
    "href": "Cheatsheet.html#plotting-with-ggplot",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Plotting with GGPlot",
    "text": "Plotting with GGPlot\n\nResources:\n\nGGPlot Cheatsheet pdf\nPosit.cloud ggplot cheatsheet, website version\n\n\n\nGGPlot Basics:\n\nBasic structure:\n\nggplot(data, mapping=aes()) +\n      geom_function()\n\nConnect different properties using a +\nBasic Components:\n\nData: data=dataSet: Define your data set\nAesthetics: mapping = aes(variables): Define the variables. Can also specify color/fill for your graph and geometries.\nGeometry: geom_GeometricObject(): Define the type of plot\n\n\n\n\nGeometries\n\ngeom_histogram(): Creates a histogram\n\nSyntax: geom_histogram(bins=X) Specify number of bins\n\ngeom_point(): Creates points (scatterplot) for each data point\n\nCan specify color = ___ and shape = ____\n\ngeom_bar() : Creates a bar graph\n\nSyntax:\n\ngeom_bar(): Aggregates data for you\ngeom_bar(stat = \"identity\"): Creates a bar graph with pre-aggregated data that you input\ngeom_bar(position=\"___\") Can choose “stack” (bars on top of each other), “dodge” (bars side by side) or “fill” (bars stacked, scaled to 100%).\nAdd error bars: geom_errorbar(mapping=aes(ymin, ymax), width)\n\n\ngeom_boxplot(): Creates a boxplot\n\nAdd error bars: stat_boxplot(geom=\"errorbar\")\n\ngeom_density(): Creates a density graph\n\nSyntax: geom_density(adjust=X) X is a ratio, how smooth the graph is\n\ngeom_smooth(method=\"lm\", se=FALSE): Creates a line of best fit\nlabs() : Add a title and axes labels to your graph\nfacet_wrap(~ variable): Create separate plots for each aspect of a given variable\nAnd more!\n\n\n\nOther useful GGPlot functions:\n\ninstall.packages(\"ggplot2\") and library(ggplot2): Install and load GGplot package. Note: ggplot2 is included in the tidyverse so you do NOT need to load both packages.\nggsave(\"yourTitleHere.jpg\", currentPlotName): Saves “currentPlotName” as a jpg file called “yourTitleHere.jpg”."
  },
  {
    "objectID": "Cheatsheet.html#examples-using-ggplot-with-other-tidyverse-functions",
    "href": "Cheatsheet.html#examples-using-ggplot-with-other-tidyverse-functions",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Examples: Using GGPlot with other tidyverse functions",
    "text": "Examples: Using GGPlot with other tidyverse functions\nUse the pipe to string together functions and create tidy data before plotting.\nThe following examples use data from the palmerpenguins package which has been preloaded into this document. Click the green play button to see them run. Feel free to edit the code as well if you want to try out other functions!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere’s a preview of the penguin data, and here is a link to more information about the data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBasic bar graph of median flipper length on each island:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoxplot of Adelie penguin flipper length, by sex:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Cheatsheet.html#inferential-statistics",
    "href": "Cheatsheet.html#inferential-statistics",
    "title": "Cheatsheet for Data in the Wild Tutorials",
    "section": "Inferential Statistics",
    "text": "Inferential Statistics\n\nBasic statistical tests\n\nt.test(data, dependentVariable ~ independentVariable): 2 sample t-test - compare 2 groups on a numerical measure\n\nRequires: 2 samples of quantitative data\n\naov(data, dependentVariable ~ independentVariable): ANOVA (analysis of variance) test - compare means among groups\n\nRequires: Independent variable - categorical; dependent variable - numerical\n\nTukeyHSD(data): Tukey’s HSD - Post Hoc test which tells you which specific means differ from each other\n\n\n\nLinear regression\n\ncor(data$independentVariable, data$dependentVariable): Correlation coefficient - outputs a number between -1 and 1 which tells strength and direction of the relationship between 2 numeric variables\n\nRequires 2 numeric variables\n\nlm(data, dependentVariable ~ independentVariable): Fit a linear model\n\nsummary(yourLinearModel): View more details about a linear model including regression coefficients, p value for linear model coefficients, quartiles, residual standard error, F-statistic."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Currently using this website to test out different projects…\nLink to github with repositories with various tutorials"
  },
  {
    "objectID": "about.html#demo-website",
    "href": "about.html#demo-website",
    "title": "About",
    "section": "",
    "text": "Currently using this website to test out different projects…\nLink to github with repositories with various tutorials"
  }
]